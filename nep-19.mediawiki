<pre>
  NEP: 19
  Title: Neo Contract Debug Info Specification
  Author: Harry Pierson (harrypierson@hotmail.com)
  Type: Standard
  Status: Draft
  Created: 2019-09-02
</pre>

==Abstract==

This NEP describes the debug information format used by the [https://github.com/neo-project/neo-debugger Neo Smart Contract Debugger]. 
This information is generated by smart contract compilers such as [https://github.com/neo-project/neo-devpack-dotnet NCCS] or [https://github.com/CityOfZion/neo-boa neo-boa].

==Motivation==

In order to provide a good developer experience, the debugger needs information about variables as well as the ability to map binary addresses in compiled smart contracts back to locations in source code.

==Specification==

<blockquote>
Note, the original version of this specification, including information regarding older versions of the debug info format is [https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN11%20-%20NEO%20Debug%20Info%20Specification.md available here]
</blockquote>

Neo compilers should emit debug information as part of the compilation process along with the required compiled contract binary and contract manifest.
Emitting debug information is optional, but the Neo Smart Contract Debugger will be limited to disassembly level debugging without it.

Debug info is stored in JSON format, described informally below and specified via the in the neo-debug-info.schema.json file. 
The debug info is stored in a file with the same base name as the contract binary and manifest and the extension .debug.json. 
The debug info can be optionally compressed in a zip file. The compressed debug info file stores a single .debug.json file and has a .nefdbgnfo extension.

The debug info contains the following information. Note, the format is defined in TypeScript for readability. 
There is no requirement that this format be implemented in TypeScript.
The full specification of this format is specified in the neo-debug-info.schema.json file

 <pre>
interface DebugInformatiom {
    hash: string; // hex-encoded UInt160
    documents: string[]; // file paths
    static-variables: Variable[]; 
    methods: Method[];
    events: Event[];
}

interface Method {
    id: string;
    name: MethodName; 
    range: string; // format: "{start-address}-{end-address}
    params: Variable[]; 
    return: TypeName;
    variables: Variable[]; 
    sequence-points: string[];
}

interface Event {
    id: string;
    name: MethodName; 
    params: Variable[]; 
}

type TypeName = string; // format: ContractParamterType enum value

type MethodName = string // format: "{namespace},{display-name}

type Variable = string; // format: "{name},{TypeName}(,{slotIndex})?

type SequencePoint = string; // format: "{address}[{document-index}]{start-line}:{start-column}-{end-line}:{end-column}"
</pre>

=== TypeName ===

TypeNames in Neo debug info must match one of the values specifed in the ContractParameterType enum type:

* Boolean
* Integer
* ByteArray
* String
* Hash160
* Hash256
* PublicKey
* Signature
* Array
* Map
* InteropInterface

=== Variable ===

Variable types are used to map NeoVM arguments, local variables and static fields back to source code.
A Variable type is a string that encodes the variable's name and TypeName, along with an optional slot index.
If the slot index is not specified, the array index of the Variable type is used as the slot index.

=== MethodName ===

MethodName types are used to store the name and optional namespace of a method or event.
If a given method or event does not have a namespace, the comma delinator is still used as a prefix to the name.

=== hash ===

This field stores the UInt160 hash value of the contract. Note, this is ''not'' the same as the contract's script hash used for invocation. 
The debugger uses this value to map deployed contracts to the correct debug information.
The hash value is stored as a hex encoded string with an optional "0x" prefix.

=== documents ===

This field stores an array of file paths, used in sequence point data.
These paths should be full file paths as they existed on the machine where the contract was compiled.
Neo Smart Contract Debugger has the ability to automatically discover differences in paths between compiling and debugging machine, plus supports manual source file mapping for cases where the mapping cannot be determined automatically.

=== static-variables ===

This field stores an array of Variable types, representing the static fields associated with this contract

=== methods ===

This field stores an array of Method types, each representing a method - both private and public - in the contract. 

Method types have the following fields:

* id: a unique string representing the method.
* name: a Method name with the method's name and optional namespace
* range: the range of NeoVM bytecode addresses that is associated with this method. Encoded as a string with the start and end addresses as integers separated by a dash
* params: a collection of Variable instances representing the NeoVM arguments associated with this method
* return: the TypeName of the method's return value
* variables: a collection of Variable instances representing the NeoVM local variables associated with this method
* sequence-points: a collection of SequencePoint instances that map NeoVM bytecode addresses back to source code

=== events ===

This field stores an array of Event types, each representing an event in the contract. 

Event types have the following fields:

* id: a unique string representing the method.
* name: a Method name with the method's name and optional namespace
* params: a collection of Variable instances representing the notification arguments associated with this method

==Rationale==

This format (or earlier versions of it) has been implemented by multiple Neo smart contract compilers including NCCS, NEON, neo-boa, Neow3j and neo-go.
==Backwards Compatibility==

Earlier versions of the Neo Smart Contract Debugger - including the debugger for Neo Legacy - supported earlier versions of this foramt. Details regarding older versions of the debug info format is [https://github.com/ngdenterprise/design-notes/blob/master/NDX-DN11%20-%20NEO%20Debug%20Info%20Specification.md available here]

==Test Cases==

N/A

==Implementation==

N/A
